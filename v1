import os

from http.server import HTTPServer, BaseHTTPRequestHandler

import socket
import datetime
import time

import json

import urllib.parse
import pathlib
import mimetypes

import threading


class HttpHandler(BaseHTTPRequestHandler):

    def do_POST(self):
        data = self.rfile.read(int(self.headers['Content-Length']))
        print(data)

        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        server = "localhost", 5000
        sock.sendto(data, server)
        sock.close()

        self.send_response(302)
        self.send_header('Location', '/')
        self.end_headers()

    def do_GET(self):
        pr_url = urllib.parse.urlparse(self.path)
        if pr_url.path == '/':
            self.send_html_file('index.html')
        elif pr_url.path == '/message.html':
            self.send_html_file('message.html')
        else:
            if pathlib.Path().joinpath(pr_url.path[1:]).exists():
                self.send_static()
            else:
                self.send_html_file('error.html', 404)

    def send_static(self):
        self.send_response(200)
        mt = mimetypes.guess_type(self.path)
        if mt:
            self.send_header("Content-type", mt[0])
        else:
            self.send_header("Content-type", 'text/plain')
        self.end_headers()
        with open(f'.{self.path}', 'rb') as file:
            self.wfile.write(file.read())

    def send_html_file(self, filename, status=200):

        self.send_response(status)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        with open(filename, 'rb') as fd:
            self.wfile.write(fd.read())


def socket_server(host, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((host, port))

    dataJSON = {}

    if os.path.isdir("storage"):
        if os.path.isfile("storage/data.json"):
            f = open("storage/data.json", "r", encoding="utf-8")
            dataJSON = json.load(f)
            f.close()
    else:
        os.makedirs("storage")

    try:
        while True:
            data, address = sock.recvfrom(1024)
            print(f'Received data: {data.decode()} from: {address}')
            data_parse = urllib.parse.unquote_plus(data.decode())
            data_dict = {key: value for key, value in [el.split('=') for el in data_parse.split('&')]}

            print("save to JSON")

            now = datetime.datetime.now()
            key = now.strftime("%Y-%m-%d %H:%M:%S.%f")

            message_dict = {key: data_dict}
            print(message_dict)

            dataJSON[key] = data_dict

            f = open("storage/data.json", "w", encoding="utf-8")
            json.dump(dataJSON, f, indent=4)
            f.close()



    except KeyboardInterrupt:
        print(f'Destroy server')

    finally:
        sock.close()


def run(server_class=HTTPServer, handler_class=HttpHandler):
    server_address = ('localhost', 3000)
    http = server_class(server_address, handler_class)

    host, port = http.socket.getsockname()[:2]
    url_host = f'[{host}]' if ':' in host else host
    print()

    try:

        http.serve_forever()

    except KeyboardInterrupt:

        http.server_close()


if __name__ == '__main__':

    thread = threading.Thread(target=socket_server, args=("localhost", 5000))
    thread.daemon = True
    thread.start()

    time.sleep(1)

    thread = threading.Thread(target=run, args=())
    thread.daemon = True
    thread.start()

    time.sleep(1)

    isEnd = False
    while not isEnd:
        a = input(">")
        if a == "exit":
            isEnd = True




